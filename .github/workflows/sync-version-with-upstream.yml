name: Update

on:
  # Runs at 10:00 UTC every day
  schedule:
    - cron:  '0 10 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync:
    name: ðŸ”„ Sync version with upstream
    environment: "Candidate Branch"
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ”„ Sync version with upstream
        uses: snapcrafters/ci/sync-version@main
        shell: bash
        with:
          token: ${{ secrets.SNAPCRAFTERS_BOT_COMMIT }}
          update-script: |
            printf 'Info: Querying the Tesseract GitHub release information...\n'
            curl_opts=(
              # Don't print progress meter but still show errors
              --silent
              --show-error

              # Follow redirection
              --location
            )
            if ! github_releases_raw="$(
              curl \
                "${curl_opts[@]}" \
                https://api.github.com/repos/tesseract-ocr/tesseract/releases
              )"; then
              printf \
                'Error: Unable to query the Tesseract releases information.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Querying the release tags from the Tesseract GitHub release information...\n'
            jq_opts=(
              # Show raw strings without quoting
              --raw-output
            )
            if ! release_tags="$(
              jq \
                "${jq_opts[@]}" \
                .[].tag_name \
                <<<"${github_releases_raw}"
              )"; then
              printf \
                'Error: Unable to query the release tags from the Tesseract GitHub release information.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Filtering out stable release tags from the Tesseract release tags...\n'
            grep_opts=(
              # Show lines that don't match the regexp
              --invert-match

              # Use Extended Regular Expressions(ERE)
              --extended-regexp

              # Match all non stable release tags
              --regexp='(alpha|b|beta|dev|rc)'
            )
            if ! stable_release_tags="$(
              grep "${grep_opts[@]}" <<<"${release_tags}"
              )"; then
              printf \
                'Error: Unable to filter out stable release tags from the Tesseract release tags.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Determining the latest stable Tesseract release tag...\n'
            head_opts=(
              --lines=1
            )
            if ! latest_stable_release_tag="$(
              head \
                "${head_opts[@]}" \
                <<<"${stable_release_tags}"
              )"; then
              printf \
                'Error: Unable to determine the latest stable Tesseract release tag.\n' \
                1>&2
              exit 2
            fi
            printf \
              'Info: Latest stable Tesseract release tag determined to be %s.\n' \
              "${latest_stable_release_tag}"

            printf \
              'Info: Determining the latest stable Tesseract release version...\n'
            # Upstream uses verbatim version string as the name of the release tag
            latest_stable_release_version="${latest_stable_release_tag}"
            printf \
              'Info: The latest stable Tesseract release version determined to be "%s".\n' \
              "${latest_stable_release_version}"

            printf \
              'Info: Replacing the Tesseract version string in the Snapcraft recipe...\n'
            sed_opts=(
              # Transform file in-place
              --in-place

              # Use Extended Regular Expressions(ERE)
              --regexp-extended

              # Update the value of the version property
              --expression="s/^(version: ).*$/\\1${latest_stable_release_version}/"
            )
            if ! sed "${sed_opts[@]}" snap/snapcraft.yaml; then
              printf \
                'Error: Unable to replace the Tesseract version string in the Snapcraft recipe.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Querying the Leptonica GitHub release information...\n'
            curl_opts=(
              # Don't print progress meter but still show errors
              --silent
              --show-error

              # Follow redirection
              --location
            )
            if ! lept_github_releases_raw="$(
              curl \
                "${curl_opts[@]}" \
                https://api.github.com/repos/DanBloomberg/leptonica/releases
              )"; then
              printf \
                'Error: Unable to query the Leptonica releases information.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Querying the release tags from the Leptonica GitHub release information...\n'
            jq_opts=(
              # Show raw strings without quoting
              --raw-output
            )
            if ! lept_release_tags="$(
              jq \
                "${jq_opts[@]}" \
                .[].tag_name \
                <<<"${lept_github_releases_raw}"
              )"; then
              printf \
                'Error: Unable to query the release tags from the Leptonica GitHub release information.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Filtering out stable release tags from the Leptonica release tags...\n'
            grep_opts=(
              # Show lines that don't match the regexp
              --invert-match

              # Use Extended Regular Expressions(ERE)
              --extended-regexp

              # Match all non stable release tags
              # As of 2024/8/23 Leptonica doesn't seem to release
              # non-stable releases, we filter out generic names
              # instead
              --regexp='(alpha|beta|dev|rc)'
            )
            if ! lept_stable_release_tags="$(
              grep "${grep_opts[@]}" <<<"${lept_release_tags}"
              )"; then
              printf \
                'Error: Unable to filter out stable release tags from the Leptonica release tags.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Determining the latest stable Leptonica release tag...\n'
            head_opts=(
              --lines=1
            )
            if ! lept_latest_stable_release_tag="$(
              head \
                "${head_opts[@]}" \
                <<<"${lept_stable_release_tags}"
              )"; then
              printf \
                'Error: Unable to determine the latest stable Leptonica release tag.\n' \
                1>&2
              exit 2
            fi
            printf \
              'Info: Latest stable Leptonica release tag determined to be %s.\n' \
              "${lept_latest_stable_release_tag}"

            printf \
              'Info: Replacing the Leptonica source commit-tag in the Snapcraft recipe...\n'
            yq_opts=(
              # Update file in-place
              --inplace

              # Set exit status if errors are occurred
              --exit-status
            )
            if ! yq \
              "${yq_opts[@]}" \
              ".parts.leptonica.source-tag = \"${lept_latest_stable_release_tag}\"" \
              snap/snapcraft.yaml; then
              printf \
                'Error: Unable to replace the Leptonica source commit-tag in the Snapcraft recipe.\n' \
                1>&2
              exit 2
            fi

            printf 'Info: Operation completed without errors.\n'
